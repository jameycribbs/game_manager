package game_manager

import (
	"math"
)

type Vector2D struct {
	X float32
	Y float32
}

//*****************************************************************************
// Length
//*****************************************************************************
func (v *Vector2D) Length() float64 {
	return math.Sqrt(float64(v.X*v.X + v.Y*v.Y))
}

//*****************************************************************************
// Add
//*****************************************************************************
func (v *Vector2D) Add(v2 *Vector2D) Vector2D {
	return Vector2D{X: v.X + v2.X, Y: v.Y + v2.Y}
}

//*****************************************************************************
// Subtract
//*****************************************************************************
func (v *Vector2D) Subtract(v2 *Vector2D) Vector2D {
	return Vector2D{X: v.X - v2.X, Y: v.Y - v2.Y}
}

//*****************************************************************************
// Multiply
//*****************************************************************************
func (v *Vector2D) Multiply(scalar float32) Vector2D {
	return Vector2D{X: v.X * scalar, Y: v.Y * scalar}
}

//*****************************************************************************
// Divide
//*****************************************************************************
func (v *Vector2D) Divide(scalar float32) Vector2D {
	return Vector2D{X: v.X / scalar, Y: v.Y / scalar}
}

//*****************************************************************************
// Normalize
//*****************************************************************************
func (v *Vector2D) Normalize() {
	l := v.Length()

	if l > 0 {
		v.Multiply(1 / float32(l))
	}
}
